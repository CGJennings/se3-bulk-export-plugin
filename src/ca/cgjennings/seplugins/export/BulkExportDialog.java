package ca.cgjennings.seplugins.export;

import ca.cgjennings.apps.arkham.BusyDialog;
import ca.cgjennings.apps.arkham.StrangeEons;
import ca.cgjennings.apps.arkham.component.ComponentMetadata;
import ca.cgjennings.apps.arkham.component.GameComponent;
import ca.cgjennings.apps.arkham.dialog.ErrorDialog;
import ca.cgjennings.apps.arkham.plugins.ScriptConsole;
import ca.cgjennings.apps.arkham.plugins.ScriptMonkey;
import ca.cgjennings.apps.arkham.project.Member;
import ca.cgjennings.apps.arkham.project.ProjectUtilities;
import ca.cgjennings.apps.arkham.project.ProjectView;
import ca.cgjennings.apps.arkham.sheet.RenderTarget;
import ca.cgjennings.apps.arkham.sheet.Sheet;
import ca.cgjennings.apps.arkham.sheet.UndecoratedCardBack;
import ca.cgjennings.graphics.ImageUtilities;
import ca.cgjennings.imageio.SimpleImageWriter;
import ca.cgjennings.platform.AgnosticDialog;
import ca.cgjennings.platform.PlatformSupport;
import ca.cgjennings.ui.JFileField;
import ca.cgjennings.ui.JHelpButton;
import java.awt.EventQueue;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import static resources.Language.string;
import resources.ResourceKit;
import resources.Settings;

/**
 * Dialog for configuring bulk export options.
 *
 * @author Christopher G. Jennings (cjennings@acm.org)
 */
public class BulkExportDialog extends javax.swing.JDialog implements AgnosticDialog {

    private static final int MAX_PPI = 3000;
    private List<Member> exportList;

    /**
     * Creates new bulk export dialog that exports the specified files.
     */
    public BulkExportDialog(List<Member> exportList) {
        super(StrangeEons.getWindow(), true);
        if (exportList == null) {
            throw new NullPointerException("exportList");
        }
        if (exportList.isEmpty()) {
            throw new IllegalArgumentException("exportList");
        }

        this.exportList = exportList;
        initComponents();
        resolutionCombo.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                resolutionComboValidate(null);
            }
        });
        ((JFileField) postProcScriptField).setFileType(JFileField.FileType.SCRIPT);
        getRootPane().setDefaultButton(okBtn);
        PlatformSupport.makeAgnosticDialog(this, okBtn, cancelBtn);

        // init panel
        loadSettings(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.ButtonGroup formatGroup = new javax.swing.ButtonGroup();
        cancelBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sizeLimitCheck = new javax.swing.JCheckBox();
        maxSizeSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        maxSizeField = new javax.swing.JTextField();
        resolutionCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jpegBtn = new javax.swing.JToggleButton();
        pngBtn = new javax.swing.JToggleButton();
        qualitySlider = new javax.swing.JSlider();
        progressiveCheck = new javax.swing.JCheckBox();
        qualityLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        excludeSimpleFacesCheck = new javax.swing.JCheckBox();
        syntheticBleedMargin = new javax.swing.JCheckBox();
        postProcCheck = new javax.swing.JCheckBox();
        postProcScriptField = new JFileField();
        editScriptBtn = new javax.swing.JButton();
        help = new JHelpButton();
        ((JHelpButton) help).setHelpPage("um-bulk-export");
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(string("bx-name")); // NOI18N

        cancelBtn.setText(string("cancel")); // NOI18N

        okBtn.setText(string("bx-ok")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(string("bx-l-size"))); // NOI18N

        jLabel1.setText(string("bx-resolution")); // NOI18N

        jLabel2.setText(string("dpi")); // NOI18N

        sizeLimitCheck.setText(string("bx-b-limit")); // NOI18N
        sizeLimitCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeLimitCheckActionPerformed(evt);
            }
        });

        maxSizeSlider.setMaximum(3000);
        maxSizeSlider.setMinimum(100);
        maxSizeSlider.setMinorTickSpacing(100);
        maxSizeSlider.setPaintTicks(true);
        maxSizeSlider.setValue(1500);
        maxSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSizeSliderStateChanged(evt);
            }
        });

        jLabel3.setText("100");

        jLabel4.setText("3000");

        maxSizeField.setColumns(5);
        maxSizeField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        maxSizeField.setText("1500");
        maxSizeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxSizeFieldFocusLost(evt);
            }
        });

        resolutionCombo.setEditable(true);
        resolutionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "72", "100", "150", "200", "300", "450", "600" }));
        resolutionCombo.setSelectedIndex(2);
        resolutionCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                resolutionComboValidate(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(maxSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sizeLimitCheck)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resolutionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(resolutionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sizeLimitCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(maxSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(maxSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(string("bx-l-format"))); // NOI18N

        formatGroup.add(jpegBtn);
        jpegBtn.setText("JPEG");
        jpegBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatButtonActionPerformed(evt);
            }
        });

        formatGroup.add(pngBtn);
        pngBtn.setSelected(true);
        pngBtn.setText("PNG");
        pngBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatButtonActionPerformed(evt);
            }
        });

        qualitySlider.setMajorTickSpacing(25);
        qualitySlider.setMinorTickSpacing(5);
        qualitySlider.setPaintLabels(true);
        qualitySlider.setPaintTicks(true);
        qualitySlider.setValue(80);
        qualitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qualitySliderStateChanged(evt);
            }
        });

        progressiveCheck.setSelected(true);
        progressiveCheck.setText(string("exf-b-progressive")); // NOI18N

        qualityLabel.setText("80%");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpegBtn)
                    .addComponent(pngBtn))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(progressiveCheck))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(qualitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(qualityLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jpegBtn, pngBtn});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jpegBtn)
                    .addComponent(qualitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qualityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pngBtn)
                    .addComponent(progressiveCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(string("bx-l-options"))); // NOI18N

        excludeSimpleFacesCheck.setText(string("exf-b-suppress-backs")); // NOI18N

        syntheticBleedMargin.setText(string("de-l-fake-bleed")); // NOI18N

        postProcCheck.setText(string("bx-b-post-proc")); // NOI18N
        postProcCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postProcCheckActionPerformed(evt);
            }
        });

        editScriptBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/project/script.png"))); // NOI18N
        editScriptBtn.setToolTipText(string("edit-misc")); // NOI18N
        editScriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excludeSimpleFacesCheck)
                    .addComponent(syntheticBleedMargin)
                    .addComponent(postProcCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(postProcScriptField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editScriptBtn)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(excludeSimpleFacesCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(syntheticBleedMargin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postProcCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postProcScriptField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editScriptBtn))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {editScriptBtn, postProcScriptField});

        resetButton.setText(string("reset")); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelBtn, okBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn)
                    .addComponent(okBtn)
                    .addComponent(help)
                    .addComponent(resetButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelBtn, help, okBtn, resetButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatButtonActionPerformed
        boolean enable = jpegBtn.isSelected();
        qualitySlider.setEnabled(enable);
        qualityLabel.setEnabled(enable);
    }//GEN-LAST:event_formatButtonActionPerformed

    private void maxSizeFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxSizeFieldFocusLost
        getSizeLimit();
    }//GEN-LAST:event_maxSizeFieldFocusLost

    private void qualitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qualitySliderStateChanged
        qualityLabel.setText(String.format("%d%%", qualitySlider.getValue()));
    }//GEN-LAST:event_qualitySliderStateChanged

    private void maxSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSizeSliderStateChanged
        maxSizeField.setText(formatter.format(maxSizeSlider.getValue()));
    }//GEN-LAST:event_maxSizeSliderStateChanged

    private void sizeLimitCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeLimitCheckActionPerformed
        boolean enable = sizeLimitCheck.isSelected();
        maxSizeSlider.setEnabled(enable);
        maxSizeField.setEnabled(enable);
    }//GEN-LAST:event_sizeLimitCheckActionPerformed

    private void resolutionComboValidate(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_resolutionComboValidate
        String val = Objects.toString(resolutionCombo.getSelectedItem(), "300");
        int ppi = 300;
        try {
            ppi = Integer.parseInt(val);
        } catch (NumberFormatException nfe) {
        }
        if (ppi < 72) {
            ppi = 72;
        } else if (ppi > MAX_PPI) {
            ppi = MAX_PPI;
        }
        resolutionCombo.setSelectedItem(String.valueOf(ppi));
    }//GEN-LAST:event_resolutionComboValidate

    private void postProcCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postProcCheckActionPerformed
        final boolean enable = postProcCheck.isSelected();
        postProcScriptField.setEnabled(enable);
        editScriptBtn.setEnabled(enable);
    }//GEN-LAST:event_postProcCheckActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        loadSettings(true);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void editScriptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptBtnActionPerformed
        String name = postProcScriptField.getText();
        File f = new File(name);
        if(ProjectUtilities.matchExtension(f, "js", "ajs")) {
            if (f.getParentFile().exists()) {
                if (!f.exists()) {
                    try {
                        ProjectUtilities.writeTextFile(f, "");
                    } catch(IOException ex) {
                        ErrorDialog.displayError(string("app-err-open", f.getName()), ex);
                        return;
                    }
                }
                StrangeEons.getWindow().openFile(f);
                Settings s = Settings.getUser();
                s.setYesNo("bulk-postprocess", true);
                s.set("bulk-postprocess-script", name);
                dispose();
                return;
            }
        }
        Toolkit.getDefaultToolkit().beep();
    }//GEN-LAST:event_editScriptBtnActionPerformed

    private void loadSettings(boolean resetToDefaults) {
        Settings s = Settings.getUser();
        if (resetToDefaults) {
            s = s.createNamespace("reset:");
        }

        String v = s.get("bulk-format", "jpg");
        if (!v.equals("jpg")) {
            pngBtn.setSelected(true);
        }

        qualitySlider.setValue(s.getInt("bulk-quality", 80));
        progressiveCheck.setSelected(s.getYesNo("bulk-progressive", false));
        resolutionCombo.setSelectedItem(s.get("bulk-resolution", "300"));

        v = s.get("bulk-max-size", "-1");
        int maxDimen = Settings.integer(v);
        if (maxDimen < 1) {
            sizeLimitCheck.setSelected(false);
        } else {
            sizeLimitCheck.setSelected(true);
            maxSizeSlider.setValue(maxDimen);
        }
        excludeSimpleFacesCheck.setSelected(s.getYesNo("bulk-exclude-simple", true));
        syntheticBleedMargin.setSelected(s.getYesNo("bulk-synthetic-bleed", false));

        postProcCheck.setSelected(s.getYesNo("bulk-postprocess", false));
        postProcScriptField.setText(s.get("bulk-postprocess-script", ""));

        formatButtonActionPerformed(null);
        resolutionComboValidate(null);
        maxSizeSliderStateChanged(null);
        sizeLimitCheckActionPerformed(null);
        postProcCheckActionPerformed(null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton editScriptBtn;
    private javax.swing.JCheckBox excludeSimpleFacesCheck;
    private javax.swing.JLabel help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JToggleButton jpegBtn;
    private javax.swing.JTextField maxSizeField;
    private javax.swing.JSlider maxSizeSlider;
    private javax.swing.JButton okBtn;
    private javax.swing.JToggleButton pngBtn;
    private javax.swing.JCheckBox postProcCheck;
    private javax.swing.JTextField postProcScriptField;
    private javax.swing.JCheckBox progressiveCheck;
    private javax.swing.JLabel qualityLabel;
    private javax.swing.JSlider qualitySlider;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox resolutionCombo;
    private javax.swing.JCheckBox sizeLimitCheck;
    private javax.swing.JCheckBox syntheticBleedMargin;
    // End of variables declaration//GEN-END:variables

    private int getSizeLimit() {
        int v;
        try {
            v = formatter.parse(maxSizeField.getText()).intValue();
            if (v < maxSizeSlider.getMinimum()) {
                v = maxSizeSlider.getMinimum();
                maxSizeField.setText(String.valueOf(v));
            } else if (v > maxSizeSlider.getMaximum()) {
                v = maxSizeSlider.getMaximum();
                maxSizeField.setText(String.valueOf(v));
            }
            if (maxSizeSlider.getValue() != v) {
                maxSizeSlider.setValue(v);
            }
        } catch (ParseException e) {
            v = maxSizeSlider.getValue();
            maxSizeField.setText(String.valueOf(v));
        }
        return v;
    }
    private NumberFormat formatter = NumberFormat.getIntegerInstance();

    @Override
    public void handleOKAction(ActionEvent e) {
        final Exporter ex = new Exporter();
        final Settings s = Settings.getUser();
        ex.setFormat(jpegBtn.isSelected() ? SimpleImageWriter.FORMAT_JPEG : SimpleImageWriter.FORMAT_PNG);
        s.set("bulk-format", ex.getFormat());
        ex.setQuality(qualitySlider.getValue() / 100d);
        s.setInt("bulk-quality", qualitySlider.getValue());
        ex.setProgressive(progressiveCheck.isSelected());
        s.setYesNo("bulk-progressive", ex.isProgressive());
        resolutionComboValidate(null);
        String resolutionString = String.valueOf(resolutionCombo.getSelectedItem());
        ex.setResolution(Double.parseDouble(resolutionString));
        s.set("bulk-resolution", resolutionString);
        ex.setDimensionLimit(sizeLimitCheck.isSelected() ? getSizeLimit() : -1);
        s.setInt("bulk-max-size", ex.getDimensionLimit());
        ex.setExcludeSimpleFaces(excludeSimpleFacesCheck.isSelected());
        s.setYesNo("bulk-exclude-simple", ex.isExcludeSimpleFaces());
        ex.setSynthesizeBleedMargin(syntheticBleedMargin.isSelected());
        s.setYesNo("bulk-synthetic-bleed", ex.isSynthesizeBleedMargin());
        s.setYesNo("bulk-postprocess", postProcCheck.isSelected());
        s.set("bulk-postprocess-script", postProcScriptField.getText());

        // load code if postprocessing enabled
        if (postProcCheck.isSelected() && !postProcScriptField.getText().isEmpty()) {
            String code = "";
            try {
                File codeFile = new File(postProcScriptField.getText());
                code = ProjectUtilities.getFileAsString(codeFile, ProjectUtilities.ENC_SCRIPT);
            } catch (IOException ioex) {
                ErrorDialog.displayError(string("bx-err-post-proc"), ioex);
                return;
            }
            ex.setPostprocessingCode(code.trim());
            ex.setPostprocessingCodeFile(postProcScriptField.getText());
        }

        dispose();

        new BusyDialog(string("bx-l-progress"), () -> {
            final HashSet<Member> parents = new HashSet<>();
            final LinkedList<String> errors = new LinkedList<>();
            final LinkedList<File> written = new LinkedList<>();

            for (Member m : exportList) {
                if (!"eon".equals(m.getExtension())) {
                    continue;
                }

                BusyDialog.statusText(m.getName(), 50);
                try {
                    Exporter.Results results = ex.export(m.getFile());
                    for (File f : results.outputFiles) {
                        written.add(f);
                    }
                    for (String err : results.errors) {
                        errors.add(err);
                    }
                    parents.add(m.getParent());

                    if (BusyDialog.getCurrentDialog().isCancelled()) {
                        for (File f : written) {
                            f.delete();
                        }
                        written.clear();
                        break;
                    }
                } catch (Exception t) {
                    errors.add(t.getLocalizedMessage());
                }
            }

            // update project listings
            EventQueue.invokeLater(() -> {
                try {
                    for (Member parent : parents) {
                        parent.synchronize();
                    }
                    if (!written.isEmpty()) {
                        final ProjectView v = StrangeEons.getWindow().getOpenProjectView();
                        if (v != null) {
                            v.clearSelection();
                            for (File f : written) {
                                Member m = v.getProject().findMember(f);
                                if (m != null) {
                                    v.addToSelection(m);
                                }
                            }
                        }
                    }
                } catch (Throwable t) {
                    StrangeEons.log.log(Level.SEVERE, "export cleanup exception", t);
                }
            });

        }, BusyDialog.NO_CANCEL_ACTION);
    }

    @Override
    public void handleCancelAction(ActionEvent e) {
        dispose();
    }
}
